import wio.math;
import wio.io;

## Abs tests
{
    Println("=== Abs Tests ===");
    Println(Abs(-12));     ## Expected: 12
    Println(Abs(12));      ## Expected: 12
    Println(Abs(-12.34));  ## Expected: 12.34
    Println(Abs(12.34));   ## Expected: 12.34
    #*
    println(abs("abc"));
    *#
}

## Sin tests
{
    Println("=== Sin Tests ===");
    Println(Sin(0.0));       ## Expected: 0.0
    Println(Sin(3.14159/2)); ## Expected: ~1.0 (approximately)
    #*
    Println(sin(1));
    *#
}

## Cos tests
{
    Println("=== Cos Tests ===");
    Println(Cos(0.0));       ## Expected: 1.0
    Println(Cos(3.14159));   ## Expected: ~-1.0 (approximately)
    #*
    Println(Cos(1));
    *#
}

## Tan tests
{
    Println("=== Tan Tests ===");
    Println(Tan(0.0));       ## Expected: 0.0
    #*
    Println(Tan(1));
    *#
}

## Sqrt tests
{
    Println("=== Sqrt Tests ===");
    Println(Sqrt(4.0));     ## Expected: 2.0
    Println(Sqrt(4));      ## Expected: 2.0 (will return as float)
    Println(Sqrt(0));    ## Expected: 0.0
    #*
    Println(Sqrt(-4.0));
    Println(Sqrt(-4));
    *#
}

## Pow tests
{
    Println("=== Pow Tests ===");
    Println(Pow(2.0, 3.0));   ## Expected: 8.0
    Println(Pow(2, 3));       ## Expected: 8
    Println(Pow(2.0, 3));   ## Expected: 8.0
    Println(Pow(2, 3.0));    ## Expected: 8.0
    #*
    Println(Pow("a", 2));
    *#
}

## Log tests
{
    Println("=== Log Tests ===");
    Println(Log(2.71828)); ## Expected: ~1.0 (approximately)
    Println(Log(10));     ## Expected: ~2.3 (approximately)
    #*
    Println(Log(0.0));      ## Expected Error: Logarithm of zero or negative number is undefined.
    Println(Log(-2.0));   ## Expected Error: Logarithm of zero or negative number is undefined.
    Println(Log(0));       ## Expected Error: Logarithm of zero or negative number is undefined.
    Println(Log(-2));      ## Expected Error:  Logarithm of zero or negative number is undefined.
    *#
}

## Log10 tests
{
    Println("=== Log10 Tests ===");
    Println(Log10(100.0));  ## Expected: 2.0
    Println(Log10(100));    ## Expected: 2.0
    #*
    Println(Log10(0.0));     ## Expected Error: Logarithm of zero or negative number is undefined.
    Println(Log10(-2.0));  ## Expected Error: Logarithm of zero or negative number is undefined.
    Println(Log10(0));      ## Expected Error: Logarithm of zero or negative number is undefined.
    Println(Log10(-2));     ## Expected Error: Logarithm of zero or negative number is undefined.
    *#
}

## ArcSin tests
{
    Println("=== ArcSin Tests ===");
    Println(ArcSin(0.0));     ## Expected: 0.0
    Println(ArcSin(1.0));     ## Expected: ~1.57 (approximately pi/2)
    Println(ArcSin(-1.0));    ## Expected: ~-1.57
    #*
    Println(ArcSin(2.0));     ## Expected Error: Arcsin input must be in the range [-1, 1]
    Println(ArcSin(1));
    *#

}

## ArcCos tests
{
  Println("=== ArcCos Tests ===");
  Println(ArcCos(1.0)); ## Expected: 0.0
  Println(ArcCos(0.0)); ## Expected: ~1.57 (approximately pi/2)
  Println(ArcCos(-1.0));## Expected: ~3.14 (approximately pi)
  #*
  Println(ArcCos(2.0)); ## Expected Error: Arccos input must be in the range [-1, 1]
  Println(ArcCos(1));
  *#
}


## ArcTan tests
{
    Println("=== ArcTan Tests ===");
    Println(ArcTan(0.0)); ## Expected: 0.0
    Println(ArcTan(1.0)); ## Expected: ~0.785 (approximately pi/4)
    #*
    Println(ArcTan(1));
    *#
}

## Ceil tests
{
    Println("=== Ceil Tests ===");
    Println(Ceil(2.3));     ## Expected: 3.0
    Println(Ceil(2.0));    ## Expected: 2.0
    Println(Ceil(-2.3));    ## Expected: -2.0
    Println(Ceil(5));      ## Expected: 5
    Println(Ceil(-5));     ## Expected: -5
    #*
    ## No specific error cases for ceil, as it handles integers and floats.
    *#
}

## Floor tests
{
    Println("=== Floor Tests ===");
    Println(Floor(2.3));    ## Expected: 2.0
    Println(Floor(2.0));   ## Expected: 2.0
    Println(Floor(-2.3));   ## Expected: -3.0
    Println(Floor(5));   ## Expected: 5
    Println(Floor(-5));  ## Expected: -5
     #*
    ## No specific error cases for floor, as it handles integers and floats.
    *#
}

## Round tests
{
    Println("=== Round Tests ===");
    Println(Round(2.3));    ## Expected: 2.0
    Println(Round(2.7));    ## Expected: 3.0
    Println(Round(2.5));    ## Expected: 3.0
    Println(Round(-2.3));   ## Expected: -2.0
    Println(Round(-2.7));   ## Expected: -3.0
    Println(Round(5));   ## Expected: 5
    #*
    ## No specific error cases for round, as it handles integers and floats
    *#
}

## Exp tests
{
  Println("=== Exp Tests ===");
  Println(Exp(0.0)); ## Expected: 1.0
  Println(Exp(1.0)); ## Expected: ~2.718 (approximately e)
  Println(Exp(1)); ## Expected: ~2.718
  #*
  Println(Exp("test")); 
  *#
}

## ArcTan2 tests
{
    Println("=== ArcTan2 Tests ===");
    Println(ArcTan2(1.0, 1.0));  ## Expected: ~0.785 (approximately pi/4)
    Println(ArcTan2(1, 1));      ## Expected: ~0.785
    #*
    Println(ArcTan2(1, "a"));
    *#

}

## Fmod tests
{
    Println("=== Fmod Tests ===");
    Println(Fmod(5.3, 2.0));  ## Expected: 1.3
    Println(Fmod(5, 2));      ## Expected: 1.0
    #*
    Println(Fmod(5, 0));
    *#
}

## Sinh tests
{
  Println("=== Sinh Tests ===");
  Println(Sinh(0.0)); ## Expected: 0.0
  Println(Sinh(1.0)); ## Expected: ~1.175
  Println(Sinh(1)); ## Expected: ~1.175
  #*
  Println(Sinh("test"));
 *#
}

## Cosh tests
{
  Println("=== Cosh Tests ===");
  Println(Cosh(0.0)); ## Expected: 1.0
  Println(Cosh(1.0)); ## Expected: ~1.543
  Println(Cosh(1));   ## Expected: ~1.543
  #*
  Println(Cosh("test"));
  *#
}

## Tanh tests
{
  Println("=== Tanh Tests ===");
  Println(Tanh(0.0)); ## Expected: 0.0
  Println(Tanh(1.0)); ## Expected: ~0.761
  Println(Tanh(1));   ## Expected: ~0.761
   #*
  Println(Tanh("test"));
  *#
}

## ArcSinh tests
{
  Println("=== ArcSinh Tests ===");
  Println(ArcSinh(0.0)); ## Expected: 0.0
  Println(ArcSinh(1.0)); ## Expected: ~0.881
  Println(ArcSinh(1)); ## Expected: ~0.881
  #*
  Println(ArcSinh("test"));
  *#
}

## ArcCosh Tests
{
    Println("=== ArcCosh Tests ===");
    Println(ArcCosh(1.0));    ## Expected: 0.0
    Println(ArcCosh(2.0));    ## Expected: ~1.317
    Println(ArcCosh(2));      ## Expected: ~1.317
    #*
    Println(ArcCosh(0.5));    ## Expected Error: arccosh input must be greater than or equal to 1
    Println(ArcCosh(0));    ## Expected Error: arccosh input must be greater than or equal to 1
    *#
}

## ArcTanh tests
{
    Println("=== ArcTanh Tests ===");
    Println(ArcTanh(0.0));    ## Expected: 0.0
    Println(ArcTanh(0.5));    ## Expected: ~0.549
    Println(ArcTanh(0));       ## Expected 0.0
    #*
    Println(ArcTanh(1.0));    ## Expected Error: arctanh input must be between -1 and 1 (exclusive)
    Println(ArcTanh(-1.0));   ## Expected Error: arctanh input must be between -1 and 1 (exclusive)
    *#
}

## Root tests
{
    Println("=== Root Tests ===");
    Println(Root(8.0, 3.0));   ## Expected: 2.0
    Println(Root(8, 3));       ## Expected: 2.0
    Println(Root(9.0, 2));   ## Expected: 3.0
    #*
    Println(Root(8, 0));     ## Expected Error: Cannot take 0th root.
    *#
}

## LogBase tests
{
    Println("=== LogBase Tests ===");
    Println(LogBase(8.0, 2.0));   ## Expected: 3.0
    Println(LogBase(8, 2));       ## Expected: 3.0
    #*
    Println(LogBase(8.0, 1.0));   ## Expected Error: Logarithm base cannot be zero, one, or negative.
    Println(LogBase(8.0, 0.0));   ## Expected Error: Logarithm base cannot be zero, one, or negative.
    Println(LogBase(0.0, 2.0));   ## Expected Error: Logarithm of zero or negative number is undefined.
    Println(LogBase(-1,2));
    *#
}

## Min tests
{
    Println("=== Min Tests ===");
    Println(Min(5, 10));       ## Expected: 5
    Println(Min(5.0, 10.0));   ## Expected: 5.0
    Println(Min(5, 10.0));     ## Expected: 5
    Println(Min(5.0, 10));     ## Expected: 5.0
    #*
    Println(Min(5, "a"));
    *#
}

## Max tests
{
    Println("=== Max Tests ===");
    Println(Max(5, 10));       ## Expected: 10
    Println(Max(5.0, 10.0));   ## Expected: 10.0
    Println(Max(5, 10.0));     ## Expected: 10.0
    Println(Max(5.0, 10));     ## Expected: 10
    #*
    Println(Max(5, "a"));
    *#
}

{
    Println("=== Constant Tests ===");

    Println(NAN);              ## Expected: NaN (Not a Number)
    Println(INF);              ## Expected: Inf (Infinity)
    Println(PI);               ## Expected: 3.141592653589793
    Println(E);                ## Expected: 2.718281828459045
    Println(LOG2E);            ## Expected: 1.4426950408889634
    Println(LOG10E);           ## Expected: 0.4342944819032518
    Println(LN2);              ## Expected: 0.6931471805599453
    Println(LN10);             ## Expected: 2.302585092994046
    Println(SQRT2);            ## Expected: 1.4142135623730951
    Println(SQRT3);            ## Expected: 1.7320508075688772
}